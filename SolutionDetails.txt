- Created Product and ProductOption in Models
- Added EntityFramework 6.1.3 as dependency for database handling
- Created new DBContext to use EntityFramework to deal with DB using Code First Migration
- Used Package Manager to generate the DB and seed the tables with some initial data
PM> Enable-Migrations -contexttypename ApplicationDbContext
-- Update the Seed method in the Migrations\Configuration.cs file with the code provided below
PM> Add-Migration InitialCreate
PM> Update-Database
- Provisioned for API versioning (v1, v2)
- Created ProductsV1Controller class to handle the product list/add/update/delete in version 1
- Added log4net 2.0.8 to implement logging functionality to the project references
- Added this [assembly: log4net.Config.XmlConfigurator(Watch = true)] to AssemblyInfo.cs to enable log4net
- Added the log4net configuration into web.config
- Log files will be generated in the logs\ subfolder from where the application is run (configurable)
- API KEY Based authentication/authorization using ApiKeyHandler to intercept the requests and verify the apikey
  This is a basic security model and can be turned off by not registering it in the Application_Start() method of Global.asax file
  Default API KEY for http header: "apikey":"LAN1HTAL-ukhp-es0j-nahc-AHTAMGNUSMAS"
- Added some basic unit tests in a separate test project (did not use mocks at this time)
- Created ProductsV2Controller class to handle the product and productoption list/add/update/delete in version 2
- Advanced REST Client Application version 9.14 used for testing the REST APIs

SAMPLES:
- Add Product
Content-Type: application/json
Payload: {"Name":"iPhone 6","Description":"Apple iPhone 5 with iOS 5.0","Price":559.99,"DeliveryPrice":259.99}

- Update Product
http://<HOSTNAME:PORT>/v1/products/{ProductID}
{"Name": "iPhone 6s", "Description": "Apple iPhone 6s with iOS 6.0", "Price": 959.99, "DeliveryPrice": 759.99}

- Add ProductOption
{"Name":"16GB", "Description":"Samsung S7 with 16GB storage"}

- Update ProductOption
http://<HOSTNAME:PORT>/v1/products/{ProductID}/options/{ProductOptionID}
{"Name":"32GB", "Description":"Samsung S7 with 32GB storage"}

-- INITIAL SEED CODE
namespace refactor_me.Migrations
{
    using Models;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Migrations;

    internal sealed class Configuration : DbMigrationsConfiguration<refactor_me.Models.ApplicationDbContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
        }

        protected override void Seed(refactor_me.Models.ApplicationDbContext context)
        {
            var products = new List<Product>
                {
                    new Product { ProductId = Guid.NewGuid(), Name="Samsung S7", Description="Samsung Galaxy S Series 7 with Android 7.0 Nougat", Price=1459.89M, DeliveryPrice=1299.50M },
                    new Product { ProductId = Guid.NewGuid(), Name="Samsung S6", Description="Samsung Galaxy S Series 6 with Android 6.0 Marshmallow", Price=1059.99M, DeliveryPrice=999.99M },
                    new Product { ProductId = Guid.NewGuid(), Name="Samsung J5", Description="Samsung Galaxy J Series 5 with Android 6.0 Marshmallow", Price=459.99M, DeliveryPrice=399.49M }
                };
            products.ForEach(prd => context.Products.AddOrUpdate(p => p.Name, prd));
            context.SaveChanges();

            var productOptions = new List<ProductOption>();
            foreach (Product p in products)
            {
                ProductOption po = new ProductOption();
                po.ProductOptionId = Guid.NewGuid();
                po.ProductId = p.ProductId;
                po.Name = "White";
                po.Description = "White " + p.Name;
                po.product = p;
                productOptions.Add(po);

                po = new ProductOption();
                po.ProductOptionId = Guid.NewGuid();
                po.ProductId = p.ProductId;
                po.Name = "Black";
                po.Description = "Black " + p.Name;
                po.product = p;
                productOptions.Add(po);

                po = new ProductOption();
                po.ProductOptionId = Guid.NewGuid();
                po.ProductId = p.ProductId;
                po.Name = "Grey";
                po.Description = "Grey " + p.Name;
                po.product = p;
                productOptions.Add(po);

                break;
            }
            productOptions.ForEach(prdOpt => context.ProductOptions.Add(prdOpt));
            context.SaveChanges();
        }
    }
}
